{
  "components": {
    "location": {
      "columns": {
        "name": "Name",
        "sceneId": "Scene",
        "maxUsersPerInstance": "Max Users Per Instance",
        "locationType": "Type",
        "tags": "Tags",
        "videoEnabled": "Video Enabled",
        "action": "Action"
      },
      "lbl-name": "Name",
      "lbl-maxuser": "Max Users",
      "lbl-scene": "Scene",
      "lbl-ve": "Video Enabled",
      "lbl-gme": "Global Media Enabled",
      "lbl-lobby": "Make Lobby",
      "lbl-featured": "Featured",
      "lbl-ae": "Audio Enabled",
      "lbl-se": "Screen Sharing Enabled",
      "lbl-fe": "Face Streaming Enabled",
      "createLocation": "Create Location",
      "updateLocation": "Update Location",
      "removeLocation": "Remove Location",
      "type": "Type",
      "selectScene": "Select a Scene",
      "sceneCantEmpty": "Scene can't be empty",
      "maxUserCantEmpty": "Max users can't be empty",
      "nameCantEmpty": "Name can't be empty",
      "typeCantEmpty": "Type can't be empty",
      "nameRequired": "Name is required",
      "maxUsersRequired": "Max users is required",
      "sceneRequired": "Scene is required",
      "typeRequired": "Type is required",
      "confirmLocationDelete": "Do you want to delete location",
      "lobby": "Lobby",
      "featured": "Featured",
      "locations": "Locations"
    },
    "bot": {
      "uniqueCommand": "Command should be unique",
      "commandRequired": "Fill in command is required",
      "nameCantEmpty": "Name can't be empty",
      "descriptionCantEmpty": "Description can't be empty",
      "locationCantEmpty": "Location can't be empty",
      "createNewBot": "Create new bot",
      "addMoreBots": "Add more bots in the system.",
      "location": "Location",
      "instance": "Instance",
      "addCommand": "Add command",
      "addMoreCommand": "Add more command",
      "command": "Command",
      "enterCommand": "Enter command here",
      "description": "Description",
      "enterDescription": "Enter description here",
      "spawnBot": "Spawn Bot",
      "lastRunStatus": "Last run status",
      "autoRefreshing": "auto refreshing in 10s",
      "engineBots": "Infinite Reality Engine bots",
      "updateBot": "UPDATE BOT",
      "name": "Name",
      "confirmBotDelete": "Do you want to delete bot"
    },
    "common": {
      "cancel": "Cancel",
      "close": "Close",
      "confirmation": "Confirmation",
      "edit": "Edit",
      "submit": "Submit",
      "save": "Save",
      "confirm": "Confirm",
      "none": "None",
      "update": "Update",
      "remove": "Remove",
      "reset": "Reset",
      "delete": "Delete",
      "view": "View",
      "kick": "Kick",
      "ban": "Ban",
      "yes": "Yes",
      "no": "No",
      "all": "All",
      "refresh": "Refresh",
      "name": "Name",
      "lastUpdatedBy": "Last updated by user id: {{userId}} on {{updatedAt}}",
      "fillRequiredFields": "Please fill all required field",
      "fixErrorFields": "Please fix all errors",
      "logOut": "Log Out",
      "newestFirst": "Newest First",
      "oldestFirst": "Oldest First"
    },
    "analytics": {
      "loading": "Loading analytics...",
      "activeParties": "Active Parties",
      "activeLocations": "Active Locations",
      "activeInstances": "Active Instances",
      "activeScenes": "Active Scenes",
      "instanceUsers": "Instance Users",
      "channelUsers": "Channel Users",
      "dailyUsers": "Daily Users",
      "dailyNewUsers": "Daily New Users",
      "usersToday": "Users Today",
      "newUsersToday": "New Users Today",
      "activity": "Activity",
      "users": "Users"
    },
    "crashReport": {
      "title": "Crash Report",
      "loading": "Loading crash report..."
    },
    "group": {
      "createGroup": "Create Group",
      "name": "Name",
      "description": "Description",
      "nameCantEmpty": "Name can't be empty",
      "descriptionCantEmpty": "Description can't be empty",
      "scopeTypeCantEmpty": "Scope can't be empty",
      "nameRequired": "Name is required",
      "descriptionRequired": "Description is required",
      "scopeTypeRequired": "Scope is required",
      "grantScope": "Grant Scope",
      "groupUsers": "Group Users",
      "confirmGroupDelete": "Do you want to delete group",
      "selectAllScopes": "Select All Scopes",
      "clearAllScopes": "Clear All Scopes"
    },
    "invite": {
      "columns": {
        "id": "Id",
        "name": "Name",
        "passcode": "Passcode",
        "type": "Type",
        "targetObjectId": "Target ID",
        "spawnType": "Spawn Type",
        "spawnDetails": "Spawn Details",
        "action": "Actions"
      },
      "invites": "Invites",
      "sendInvite": "Send Invite",
      "receivedInvite": "Received Invite",
      "confirmInviteDelete": "Do you want to delete invite",
      "confirmMultiInviteDelete": "Do you want to delete all of the selected invites?",
      "create": "Create Invite",
      "recipients": "Recipients",
      "type": "Type",
      "singleTargetLabel": "Invite recipient",
      "targetLabel": "Invite recipients",
      "target": "Enter a comma-separated list of invite codes and/or emails/SMSes",
      "singleTarget": "Enter an invite code or email/SMS",
      "friend": "User invite code",
      "group": "Group ID",
      "party": "Party ID",
      "submit": "Send Invite(s)",
      "update": "Update Invite",
      "remove": "Remove Invite",
      "removeInvites": "Remove Invites",
      "location": "Location",
      "instance": "Instance",
      "user": "User",
      "new-user": "User",
      "spawnPoint": "Spawn Point",
      "userPosition": "User Position",
      "timedInvite": "Timed",
      "oneTime": "One Time Use",
      "makeAdmin": "Make Admin",
      "selectLocation": "Select Location",
      "selectInstance": "Select Instance",
      "spawnAtPosition": "Spawn at Position",
      "selectSpawnPoint": "Select Spawn Point",
      "selectUserPosition": "Select User Position",
      "deleteSelected": "Delete selected invites",
      "startTime": "Start Time",
      "endTime": "End Time",
      "errors": {
        "recipients": "Please enter the email recipients",
        "inviteLocation": "Please select a location",
        "inviteInstance": "Please select an instance",
        "spawnPoint": "Please select a spawn point",
        "userPosition": "Please select a user position",
        "startTime": "Please select the start date and time",
        "endTime": "Please select the end date and time"
      }
    },
    "channel": {
      "channels": "Channels",
      "columns": {
        "id": "Id",
        "name": "Name",
        "action": "Action"
      },
      "instanceRequired": "Instance is required",
      "instanceCantEmpty": "Instance can't be empty",
      "instance": "Instance",
      "createOne": "Create One",
      "createChannel": "Create Channel",
      "update": "Update Channel",
      "confirmChannelDelete": "Do you want to delete channel",
      "confirmMultiChannelDelete": "Do you want to delete these channels?",
      "name": "Channel Name",
      "remove": "Remove Channel",
      "removeChannels": "Remove Channels"
    },
    "project": {
      "columns": {
        "name": "Name",
        "projectVersion": "Version",
        "enabled": "Enabled",
        "visibility": "Visibility",
        "commitSHA": "Commit SHA",
        "commitDate": "Commit Date",
        "actions": "Actions"
      },
      "actions": {
        "push": "Push",
        "repo": "Repo",
        "access": "Access",
        "invalidateCache": "Invalidate Cache",
        "update": "Update",
        "history": "History"
      },
      "projectHistory": "Project History",
      "addProject": "Add Project",
      "updateProject": "Update Project",
      "downloadProject": "Download Project",
      "rebuild": "Rebuild",
      "rebuilding": "Rebuilding",
      "updateEngine": "Update Engine",
      "updateSelector": "Update projects",
      "currentEngineVersion": "Current Engine Version: {{version}}",
      "currentEngineCommit": "Current Engine Commit: {{commit}}",
      "projectWarning": "WARNING: Updating projects along with the Engine version may result in loss of work. If you revert to an old engine project and update projects with it, your copy of these projects will also be reverted. It is recommended that you back up the destination branch of these projects if you have made modifications that might be lost.",
      "updateAndRebuild": "Update Engine/Rebuild",
      "checking": "Checking Rebuild",
      "project": "Project",
      "githubUrl": "GitHub URL",
      "urlRequired": "URL is required",
      "urlCantEmpty": "URL can't be empty",
      "updateGithubRepoLink": "Update GitHub Repo Link",
      "setGithubRepoLink": "Set GitHub Repo Link",
      "githubRepoUrl": "GitHub Repo URL",
      "publicUrl": "Public URL",
      "processing": "Processing",
      "confirmProjectsRebuild": "Do you want to rebuild projects?",
      "confirmProjectRebuild": "Do you want to rebuild project",
      "confirmProjectResetMain1": "Do you want to reset the project",
      "confirmProjectResetMain2": "to the main branch in the linked GitHub repository? Your branch, ",
      "confirmProjectResetMain3": "will be forcibly overridden by the contents of the main branch.",
      "confirmProjectInvalidate": "Do you want to invalidate storage provider's cache of",
      "confirmProjectDelete": "Do you want to delete project",
      "confirmPushProjectToGithub": "Do you want to push this project to its associated GitHub repository",
      "outdatedBuild": "This project has been updated locally since the last build",
      "hasLocalChanges": "This project has local changes, and will not auto-update from GitHub if that is enabled in order to prevent accidental data loss",
      "userAccess": "User Access",
      "userInviteCode": "User Invite Code",
      "inviteCodeCantEmpty": "Invite code can't be empty",
      "inviteCodeRequired": "Invite code is required",
      "source": "Source Repo",
      "sourceType": "Source type",
      "destination": "Destination Repo",
      "destinationType": "Destination type",
      "destinationProcessing": "Checking that you have access to destination repo",
      "sourceVsDestinationProcessing": "Checking that source and destination are the same project, or destination is empty",
      "files": "Files",
      "branchData": "Source branch",
      "commitData": "Commit",
      "branchProcessing": "Fetching branches of project",
      "commitsProcessing": "Fetching commits of project",
      "mismatchedProjectWarning": "This version of this project does not match the installed version of Infinite Reality Engine. There may be compilation or runtime errors if this project is installed.",
      "needsGithubProvider": "You must connect your account with GitHub in order to create new projects, or add or update projects from GitHub",
      "sourceProjectName": "Project in source repo",
      "destinationProjectName": "Project in destination repo",
      "destinationRepoEmpty": "The destination repo is empty",
      "destinationURLValid": "Is Destination URL valid and accessible?",
      "sourceURLValid": "Is Source URL valid and accessible?",
      "sourceMatchesDestination": "Does Source Project match destination, or destination empty?",
      "changeDestination": "Change Destination Repo",
      "copyDestination": "Copy Destination",
      "autoUpdate": "Auto Update",
      "enableAutoUpdate": "Enable Auto Update",
      "autoUpdateMode": "Auto Update Mode",
      "dev": "Dev",
      "devTooltip": "In dev mode, the project is updated whenever a new commit is pushed to source branch of source repo",
      "prod": "Prod",
      "prodTooltip": "In prod mode, the project is updated whenever a tag release is pushed in source repo",
      "autoUpdateInterval": "Auto Update Interval",
      "minute": "minute",
      "minutes": "minutes",
      "hour": "hour",
      "hours": "hours",
      "day": "day",
      "commitSHACopied": "Commit SHA copied",
      "buildStatus": "Build Status",
      "defaultProjectUpdateTooltip": "default-project is updated when engine is updated",
      "refreshGithubRepoAccess": "Refresh GitHub Repo Access",
      "refreshingGithubRepoAccess": "Refreshing"
    },
    "buildStatus": {
      "columns": {
        "id": "Build #",
        "status": "Status",
        "commitSHA": "Commit SHA",
        "logs": "Logs",
        "dateStarted": "Date Started",
        "dateEnded": "Date Ended"
      },
      "buildStatus": "Build Status",
      "running": "Running",
      "viewLogs": "View Logs"
    },
    "instance": {
      "columns": {
        "id": "Instance ID",
        "ipAddress": "IP Address",
        "currentUsers": "Current Users",
        "isActive": "Is Active",
        "locationName": "Location",
        "channelId": "Channel",
        "podName": "Pod Name",
        "action": "Action"
      },
      "actions": {
        "view": "View",
        "delete": "Delete"
      },
      "active": "Active",
      "ended": "Ended",
      "instances": "Instance",
      "confirmInstanceDelete": "Do you want to delete instance",
      "location": "Location",
      "count": "Count",
      "kick": "Kick",
      "ban": "Ban",
      "unban" : "Unban",
      "banned": "Banned till {{duration}}",
      "kickDuration": "Kick Duration",
      "confirmUserBan": "Are you sure you want to ban this user?",
      "noInstanceUsers": "No users in this instance"
    },
    "resources": {
      "columns": {
        "id": "Id",
        "key": "Key",
        "name": "Name",
        "mimeType": "Mime Type",
        "project": "Project",
        "action": "Action"
      },
      "confirmation": "Confirmation",
      "resources": "Resources",
      "resourceType": "Resource Type",
      "preview": "Preview",
      "createResource": "Create Resource",
      "resourceName": "Resource Name",
      "confirmResourceDelete": "Do you want to delete resource",
      "nameCantEmpty": "Name can't be empty",
      "resourceTypeCantEmpty": "Resource type can't be empty",
      "resourceUrlCantEmpty": "Resource url can't be empty",
      "resourceFileCantEmpty": "Resource file can't be empty",
      "nameRequired": "Name is required",
      "resourceTypeRequired": "Resource type is required",
      "resourceUrlInvalid": "Resource url is not valid",
      "resourceFileOversized": "Resource file size must be between {{minSize}} MB and {{maxSize}} MB",
      "selectFile": "Select File",
      "resourceUrl": "Resource URL"
    },
    "setting": {
      "authentication": {
        "header": "Authentication",
        "subtitle": "Edit Authentication Settings"
      },
      "service": "Service",
      "githubAppId": "App ID (Enter for GitHub App, omit for OAuth App)",
      "secret": "Secret",
      "jwtAlgorithm": "JWT Algorithm",
      "jwtPublicKey": "JWT Public Key",
      "entity": "Entity",
      "authStrategies": "Authentication Strategies",
      "userName": "User Name",
      "local": "Local",
      "oauth": "OAuth",
      "password": "Password",
      "defaults": "Defaults",
      "host": "Host",
      "protocol": "Protocol",
      "apple": "Apple",
      "discord": "Discord",
      "facebook": "Meta",
      "google": "Google",
      "github": "Github",
      "linkedIn": "LinkedIn",
      "twitter": "X",
      "key": "Key",
      "callback": "Callback",
      "appTitle": "App Title",
      "appSubtitle": "App Subtitle",
      "appDescription": "App Description",
      "appBackground": "App Background",
      "appSocialLinks": "Social Links",
      "icon": "Icon",
      "link": "Link",
      "resetTheme": "Reset to Default",
      "aws": {
        "header": "AWS",
        "subtitle": "Edit AWS Settings"
      },
      "features": {
        "header": "Features",
        "subtitle": "Edit Feature Flag Settings"
      },
      "keys": "Keys",
      "accessKeyId": "Access Key ID",
      "secretAccessKey": "Secret Access Key",
      "eks": "EKS",
      "hostedZoneId": "Hosted Zone ID",
      "s3": "S3",
      "endpoint": "Endpoint",
      "staticResourceBucket": "Static Resource Bucket",
      "region": "Region",
      "avatarDir": "AvatarDir",
      "s3DevMode": "S3DevMode",
      "domain": "Domain",
      "distributionId": "Distribution ID",
      "cloudFront": "Cloud Front",
      "sms": "SMS",
      "applicationId": "Application ID",
      "senderId": "Sender ID",
      "apiKey": "ApiKey",
      "url": "URL",
      "chargebee": "Chargebee",
      "client": {
        "header": "Client",
        "subtitle": "Edit Client Settings",
        "main": "Main",
        "logo": "Logo",
        "other": "Other",
        "media": "Audio & Video"
      },
      "clientId": "OAuth2 client_id",
      "clientSecret": "OAuth2 client_secret",
      "coil": "Coil",
      "coilPaymentPointer": "Payment Pointer",
      "title": "Title",
      "description": "Description",
      "logo": "Logo",
      "appleTouchIcon": "Apple Touch Icon",
      "icon192px": "Icon 192px",
      "icon512px": "Icon 512px",
      "favIcon16px": "FavIcon 16px",
      "favIcon32px": "FavIcon 32px",
      "webmanifestLink": "Webmanifest",
      "swScriptLink": "service-worker.js",
      "releaseName": "Release Name",
      "email": {
        "header": "Email",
        "subtitle": "Edit Email Settings"
      },
      "smtp": "SMTP",
      "port": "Port",
      "secure": "Secure",
      "auth": "Auth",
      "from": "From",
      "for": "For",
      "to": "To",
      "subject": "Subject",
      "login": "Login",
      "friend": "Friend",
      "group": "group",
      "party": "Party",
      "channel": "Channel",
      "smsNameCharLimit": "SMS Name Character Limit",
      "instanceServer": {
        "header": "Instance Server",
        "subtitle": "Edit Instance Server Settings"
      },
      "clientHost": "Client Host",
      "rtcStartPort": "RTC Start Port",
      "rtcEndPort": "RTC End Port",
      "rtcPortBlockSize": "RTC Block Size",
      "identifierDigits": "Identifier Digits",
      "mode": "Mode",
      "locationName": "Location Name",
      "settings": "Settings",
      "redis": {
        "header": "Redis",
        "subtitle": "Edit Redis Settings"
      },
      "enabled": "Enabled",
      "address": "Address",
      "hostName": "Host Name",
      "rootDirectory": "Root Directory",
      "publicDirectory": "Public Directory",
      "nodeModulesDirectory": "Node Modules Directory",
      "localStorageProvider": "Local Storage Provider",
      "performDryRun": "Perform Dry Run",
      "storageProvider": "Storage Provider",
      "googleAnalyticsMeasurementId": "Google Analytics Measurement ID",
      "googleTagManagerContainerId": "Google Tag Manager Container ID",
      "googleTagManagerAuth": "Google Tag Manager Auth",
      "googleTagManagerAuthDescription": "Auth token for testing, see custom environments.",
      "googleTagManagerPreview": "Google Tag Manager Preview",
      "googleTagManagerPreviewDescription": "Environment to test, see custom environments.",
      "certPath": "CertPath",
      "keyPath": "KeyPath",
      "githubWebhookSecret": "Github Webhook Secret",
      "githubPrivateKey": "Github Private Key",
      "instanceserverUnreachableTimeoutSeconds": "Seconds for instanceserver to be considered unreachable",
      "patchInstanceserver": "Patch Instanceserver",
      "hub": "Hub",
      "placeholderText": "This is the input placeholder",
      "addSocialLink": "Add Social Link",
      "themePlayground": "Theme Playground",
      "defaultThemes": "Default Themes",
      "theme": "Theme",
      "editor": "Editor",
      "studio": "Studio",
      "admin": "Admin",
      "key8thWall": "8th Wall Key",
      "shortTitle": "PWA Short Title",
      "startPath": "PWA Start Path",
      "shortTitleTooltip": "The displayed title of a PWA-installed copy of this app if 'title' is too long; recommended max 12 characters",
      "startPathTooltip": "The path that a PWA-installed copy of this app will direct to",
      "authSettingsRefreshNotification": "Updating authentication settings requires restarting the API pods. This should be complete within a few minutes. Changes you just made may not be reflected until then.",
      "homepageLinkButtonEnabled": "Show link button on homepage",
      "homepageLinkButtonRedirect": "URL of homepage link button",
      "homepageLinkButtonText": "Text of homepage link button",
      "audioMaxBitrate": "User Audio max bitrate (kbps)",
      "videoCodec": "User video codec",
      "videoMaxResolution": "User webcam max resolution",
      "videoFHD": "1920x1080",
      "videoHD": "1280x720",
      "videoFWVGA": "854x480",
      "videoNHD": "640x360",
      "videoLowResMaxBitrate": "User low-res video max bitrate (kbps)",
      "videoMidResMaxBitrate": "User mid-res video max bitrate (kbps)",
      "videoHighResMaxBitrate": "User high-res video max bitrate (kbps)",
      "screenshareCodec": "Screenshare video codec",
      "screenshareLowResMaxBitrate": "Screenshare low-res video max bitrate (kbps)",
      "screenshareMidResMaxBitrate": "Screenshare mid-res video max bitrate (kbps)",
      "screenshareHighResMaxBitrate": "Screenshare high-res video max bitrate (kbps)",
      "privacyPolicy": "Privacy Policy",
      "webRTCSettings": {
        "main": "WebRTC Settings",
        "useCustomICEServers": "Use custom iceServers configuration",
        "iceServers": "iceServers (STUN/TURN configuration)",
        "iceServer": "iceServer #",
        "iceURL": "ICE URL #",
        "username": "Username",
        "credential": "Password",
        "useFixedCredentials": "Use fixed username/password to authenticate STUN/TURN server",
        "useTimeLimitedCredentials": "Use time-limited credentials to authenticate STUN/TURN server",
        "webRTCStaticAuthSecretKey": "Shared static-auth-secret for authenticating STUN/TURN server",
        "usePrivateInstanceserverIP": "Return instanceservers' raw private IP address instead of DNS record"
      },
      "project": {
        "header": "Project",
        "subtitle": "Edit Project Settings",
        "submit": "Submit",
        "clear": "Clear",
        "save": "Save",
        "delete": "Delete",
        "add": "Add",
        "noSettingsMessage": "No settings available",
        "duplicateKey": "Duplicate keys cannot exist",
        "keyName": "Key Name",
        "value": "Value"
      },
      "server": {
        "header": "Server",
        "subtitle": "Edit Mode, Storage Provider, Host Name, Hub,etc."
      },
      "helm": {
        "header": "Helm Chart Versions",
        "subtitle": "To apply a new Helm chart version, Save here, then go to /admin/projects and then Rebuild",
        "main": "Main deployment Helm version",
        "builder": "Builder deployment Helm version",
        "explainer": "To apply a new Helm chart version, Save here, then go to /admin/projects and then Rebuild",
        "builderHelmToDeploy": "Builder Helm chart to deploy",
        "mainHelmToDeploy": "Main Helm chart to deploy"
      },
      "taskServer": {
        "taskServer": "Task Server",
        "subtitle": "Edit Task Server Settings",
        "port": "Port",
        "processInterval": "Process Interval"
      },
      "plugins": "Plugins",
      "metabase": {
        "header": "Metabase",
        "subtitle": "Edit Metabase Settings",
        "siteUrl": "Site Url",
        "secretKey": "Secret Key",
        "environment": "Environment",
        "expiration": "Expiration",
        "crashDashboardId": "Crash Dashboard Id"
      },
      "zendesk": {
        "header": "Zendesk",
        "subtitle": "Edit Zendesk Settings"
      },
      "mailchimp": {
        "header": "Mailchimp",
        "subtitle": "Edit Mailchimp Settings",
        "key": "Key",
        "server": "Server",
        "audienceId": "Audience Id",
        "defaultTags": "Default Tags (comma separated)"
      },
      "keyName": "key Name",
      "kid": "Key Id"
    },
    "avatar": {
      "columns": {
        "id": "Id",
        "name": "Name",
        "user": "Owner",
        "isPublic": "Public",
        "thumbnail": "Thumbnail",
        "action": "Action"
      },
      "avatars": "Avatars",
      "source": "Source",
      "file": "File",
      "url": "Url",
      "uploadAvatar": "Upload Avatar Model",
      "avatarUrlPreview": "Enter Avatar URL to preview",
      "add": "Add Avatar",
      "update": "Update Avatar",
      "view": "View Avatar",
      "remove": "Remove Avatar",
      "avatarPreview": "Avatar Preview",
      "thumbnailPreview": "Thumbnail Preview",
      "avatarUrl": "Avatar URL",
      "thumbnailUrl": "Thumbnail URL",
      "selectAvatar": "Select Avatar",
      "clearAvatar": "Clear Avatar",
      "selectThumbnail": "Select Thumbnail",
      "clearThumbnail": "Clear Thumbnail",
      "saveThumbnail": "Generate Thumbnail",
      "uploadThumbnail": "Upload Thumbnail",
      "thumbnailURLPreview": "Enter thumbnail URL to preview",
      "saveThumbnailTooltip": "Generate thumbnail from avatar preview",
      "nameCantEmpty": "Name can't be empty",
      "avatarUrlCantEmpty": "Avatar url can't be empty",
      "thumbnailUrlCantEmpty": "Thumbnail url can't be empty",
      "avatarFileCantEmpty": "Avatar file can't be empty",
      "thumbnailFileCantEmpty": "Thumbnail file can't be empty",
      "nameRequired": "Name is required",
      "avatarUrlInvalid": "Avatar url is not valid",
      "thumbnailUrlInvalid": "Thumbnail url is not valid",
      "avatarFileOversized": "Avatar file size must be between {{minSize}} MB and {{maxSize}} MB",
      "thumbnailFileOversized": "Thumbnail file size must be between {{minSize}} MB and {{maxSize}} MB",
      "zoom": "Zoom",
      "leftClick": "Left Click",
      "rightClick": "Right Click",
      "scroll": "Scroll",
      "loading": "Loading",
      "confirmAvatarDelete": "Do you want to delete avatar",
      "confirmMultiDelete": "Do you want to delete all of the selected avatars?",
      "deleteSelected": "Delete selected avatars",
      "confirmThumbnailReplace": "Do you want to replace previously selected avatar thumbnail with current avatar preview?"
    },
    "user": {
      "columns": {
        "id": "Id",
        "name": "Name",
        "avatar": "Avatar",
        "accountIdentifier": "Linked Accounts",
        "lastLogin": "Last Login",
        "acceptedTOS": "TOS Agreed",
        "isGuest": "Is Guest",
        "action": "Action"
      },
      "users": "Users",
      "addUser": "Add User",
      "updateUser": "Update User",
      "nameCantEmpty": "Name can't be empty",
      "avatarCantEmpty": "Avatar can't be empty",
      "scopeTypeCantEmpty": "Scope type can't be empty",
      "createUser": "Create User",
      "nameRequired": "Name is required",
      "namePlaceholder": "Enter name of the user",
      "avatarRequired": "Avatar is required",
      "scopeTypeRequired": "Scope type is required",
      "hideGuests": "Hide guests",
      "id": "Id",
      "name": "Name",
      "avatar": "Avatar",
      "grantScope": "Grant Scope",
      "location": "Location",
      "inviteCode": "Invite Code",
      "instance": "Instance",
      "remove": "Remove User",
      "removeUsers": "Remove Users",
      "confirmUserDelete": "Do you want to delete user",
      "confirmMultiUserDelete": "Do you want to delete all these users?",
      "isGuest": "Is guest",
      "selectAllScopes": "Select All Scopes",
      "clearAllScopes": "Clear All Scopes",
      "userSearch": "user by id, name or account identifier",
      "linkedAccounts": "Linked Accounts",
      "apple": "Apple",
      "discord": "Discord",
      "facebook": "Meta",
      "google": "Google",
      "github": "Github",
      "linkedIn": "LinkedIn",
      "twitter": "X",
      "sms": "SMS",
      "email": "Email",
      "selectAvatar": "Select an Avatar",
      "selectScopes": "Select Scopes"
    },
    "server": {
      "servers": "Servers",
      "migrations": "Migrations",
      "apiJobs": "API Jobs",
      "loading": "Fetching Server Info",
      "loadingLogs": "Fetching Server Logs",
      "name": "Name",
      "status": "Status",
      "serverStatus": {
        "succeeded": "Succeeded",
        "running": "Running",
        "pending": "Pending",
        "failed": "Failed",
        "Unknown": "Unknown"
      },
      "type": "Type",
      "users": "Users",
      "instance": "Instance",
      "restarts": "Restarts",
      "containers": "Containers",
      "container": "Container",
      "age": "Time",
      "logs": "Logs",
      "serverLogs": "Server Logs",
      "actions": "Actions",
      "autoRefresh": "Auto Refresh",
      "none": "None",
      "seconds": "seconds",
      "minute": "minute",
      "minutes": "minutes",
      "download": "Download",
      "downloadLogs": "Download Logs",
      "removePod": "Remove Pod",
      "confirmPodDelete": "Do you want to delete pod",
      "viewLogs": "View Logs",
      "columns": {
        "migrationsInfo": {
        "id": "ID",
        "name": "Name",
        "batch": "Batch",
        "migration_time": "Migration Time"
        },
        "apiJobs": {
        "id": "ID",
        "name": "Name",
        "status": "Status",
        "start_time": "Start Time",
        "end_time": "End Time",
        "return_data": "Return Data"
        }
      }
    },
    "recording": {
      "columns": {
        "id": "Recording ID",
        "user": "User",
        "ended": "Ended",
        "schema": "Schema",
        "preview": "Preview",
        "action": "Action"
      },
      "recording": "Recordings",
      "confirmRecordingDelete": "Do you want to delete recording",
      "recordingFiles": "Recordings Files for:"
    },
    "route": {
      "routes": "Routes",
      "columns": {
        "project": "Project",
        "route": "Route",
        "action": "Active"
      }
    },
    "history": {
      "publishedLocation": "published the location",
      "modifiedLocation": "modified the location",
      "unpublishedLocation": "unpublished the location",
      "fromScene": "from the scene",
      "added": "added the",
      "created": "created the",
      "removed": "removed the",
      "renamed": "renamed a",
      "modified": "modified the",
      "accessTo": "access to",
      "updatedTags": "updated the tags for",
      "createdThumbnail": "created a thumbnail: ",
      "updatedThumbnail": "updated the thumbnail of the resource: ",
      "removedThumbnail": "removed the thumbnail for the resource: ",
      "updatePermission": "updated the permission of the user"
    }
  }
}
